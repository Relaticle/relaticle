// resources/js/flowforge.js
function flowforge({ state }) {
  return {
    state,
    columns: state.columns,
    currentColumn: null,
    isLoading: {},
    init: function() {
      this.$wire.$on("kanban-record-created", (data) => {
        const id = data[0].id;
        const column = data[0].column;
        this.$dispatch("close-modal", { id: "create-record-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-add");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-add");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-record-updated", (data) => {
        console.log({
          data
        });
        const id = data[0].id;
        this.$dispatch("close-modal", { id: "edit-record-modal" });
      });
      this.$wire.$on("kanban-record-deleted", (data) => {
        const id = data[0].id;
        this.$dispatch("close-modal", { id: "edit-record-modal" });
        setTimeout(() => {
          const cardElement = document.querySelector(`[x-sortable-item="${id}"]`);
          if (cardElement) {
            cardElement.classList.add("animate-kanban-card-delete");
            setTimeout(() => {
              cardElement.classList.remove("animate-kanban-card-delete");
            }, 500);
          }
        }, 300);
      });
      this.$wire.$on("kanban-items-loaded", (data) => {
        const columnId = data[0]?.columnId;
        if (columnId) {
          this.isLoading[columnId] = false;
        }
      });
      this.$wire.$on("close-modal", (data) => {
        this.$wire.resetEditForm();
      });
    },
    /**
     * Check if we're loading items for a specific column
     */
    isLoadingColumn(columnId) {
      return this.isLoading[columnId] || false;
    },
    /**
     * Begin loading more items for a column
     */
    beginLoading(columnId) {
      this.isLoading[columnId] = true;
    }
  };
}
export {
  flowforge as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vanMvZmxvd2ZvcmdlLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbG93Zm9yZ2Uoe3N0YXRlfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBjb2x1bW5zOiBzdGF0ZS5jb2x1bW5zLFxuICAgICAgICBjdXJyZW50Q29sdW1uOiBudWxsLFxuICAgICAgICBpc0xvYWRpbmc6IHt9LFxuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2FyZCBjcmVhdGlvblxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1yZWNvcmQtY3JlYXRlZCcsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBkYXRhWzBdLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IGRhdGFbMF0uY29sdW1uO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kZGlzcGF0Y2goJ2Nsb3NlLW1vZGFsJywgeyBpZDogJ2NyZWF0ZS1yZWNvcmQtbW9kYWwnIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gSGlnaGxpZ2h0IHRoZSBuZXcgY2FyZFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFt4LXNvcnRhYmxlLWl0ZW09XCIke2lkfVwiXWApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUta2FuYmFuLWNhcmQtYWRkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWthbmJhbi1jYXJkLWFkZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjYXJkIHVwZGF0ZVxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1yZWNvcmQtdXBkYXRlZCcsIChkYXRhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YVswXS5pZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjbG9zZS1tb2RhbCcsIHsgaWQ6ICdlZGl0LXJlY29yZC1tb2RhbCcgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgdGhlIHVwZGF0ZWQgY2FyZFxuICAgICAgICAgICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFt4LXNvcnRhYmxlLWl0ZW09XCIke2lkfVwiXWApO1xuICAgICAgICAgICAgICAgIC8vICAgICBpZiAoY2FyZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUta2FuYmFuLWNhcmQtbW92ZScpO1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgY2FyZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnYW5pbWF0ZS1rYW5iYW4tY2FyZC1tb3ZlJyk7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9LCA1MDApO1xuICAgICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgICAgLy8gfSwgMzAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGNhcmQgZGVsZXRpb25cbiAgICAgICAgICAgIHRoaXMuJHdpcmUuJG9uKCdrYW5iYW4tcmVjb3JkLWRlbGV0ZWQnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gZGF0YVswXS5pZDtcblxuICAgICAgICAgICAgICAgIHRoaXMuJGRpc3BhdGNoKCdjbG9zZS1tb2RhbCcsIHsgaWQ6ICdlZGl0LXJlY29yZC1tb2RhbCcgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBIaWdobGlnaHQgdGhlIGRlbGV0ZWQgY2FyZFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFt4LXNvcnRhYmxlLWl0ZW09XCIke2lkfVwiXWApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUta2FuYmFuLWNhcmQtZGVsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlLWthbmJhbi1jYXJkLWRlbGV0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIHdoZW4gaXRlbXMgYXJlIGxvYWRlZFxuICAgICAgICAgICAgdGhpcy4kd2lyZS4kb24oJ2thbmJhbi1pdGVtcy1sb2FkZWQnLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgc3BlY2lmaWMgY29sdW1uIHRoYXQgd2FzIHVwZGF0ZWRcbiAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW5JZCA9IGRhdGFbMF0/LmNvbHVtbklkO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgbG9hZGluZyBzdGF0ZSBmb3IgdGhpcyBjb2x1bW5cbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmdbY29sdW1uSWRdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuJHdpcmUuJG9uKCdjbG9zZS1tb2RhbCcsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4kd2lyZS5yZXNldEVkaXRGb3JtKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrIGlmIHdlJ3JlIGxvYWRpbmcgaXRlbXMgZm9yIGEgc3BlY2lmaWMgY29sdW1uXG4gICAgICAgICAqL1xuICAgICAgICBpc0xvYWRpbmdDb2x1bW4oY29sdW1uSWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzTG9hZGluZ1tjb2x1bW5JZF0gfHwgZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJlZ2luIGxvYWRpbmcgbW9yZSBpdGVtcyBmb3IgYSBjb2x1bW5cbiAgICAgICAgICovXG4gICAgICAgIGJlZ2luTG9hZGluZyhjb2x1bW5JZCkge1xuICAgICAgICAgICAgdGhpcy5pc0xvYWRpbmdbY29sdW1uSWRdID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWUsU0FBUixVQUEyQixFQUFDLE1BQUssR0FBRztBQUN2QyxTQUFPO0FBQUEsSUFDSDtBQUFBLElBQ0EsU0FBUyxNQUFNO0FBQUEsSUFDZixlQUFlO0FBQUEsSUFDZixXQUFXLENBQUM7QUFBQSxJQUVaLE1BQU0sV0FBWTtBQUVkLFdBQUssTUFBTSxJQUFJLHlCQUF5QixDQUFDLFNBQVM7QUFDOUMsY0FBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ25CLGNBQU0sU0FBUyxLQUFLLENBQUMsRUFBRTtBQUV2QixhQUFLLFVBQVUsZUFBZSxFQUFFLElBQUksc0JBQXNCLENBQUM7QUFHM0QsbUJBQVcsTUFBTTtBQUNiLGdCQUFNLGNBQWMsU0FBUyxjQUFjLHFCQUFxQixFQUFFLElBQUk7QUFDdEUsY0FBSSxhQUFhO0FBQ2Isd0JBQVksVUFBVSxJQUFJLHlCQUF5QjtBQUNuRCx1QkFBVyxNQUFNO0FBQ2IsMEJBQVksVUFBVSxPQUFPLHlCQUF5QjtBQUFBLFlBQzFELEdBQUcsR0FBRztBQUFBLFVBQ1Y7QUFBQSxRQUNKLEdBQUcsR0FBRztBQUFBLE1BQ1YsQ0FBQztBQUdELFdBQUssTUFBTSxJQUFJLHlCQUF5QixDQUFDLFNBQVM7QUFFOUMsZ0JBQVEsSUFBSTtBQUFBLFVBQ1I7QUFBQSxRQUNKLENBQUM7QUFDRCxjQUFNLEtBQUssS0FBSyxDQUFDLEVBQUU7QUFFbkIsYUFBSyxVQUFVLGVBQWUsRUFBRSxJQUFJLG9CQUFvQixDQUFDO0FBQUEsTUFZN0QsQ0FBQztBQUdELFdBQUssTUFBTSxJQUFJLHlCQUF5QixDQUFDLFNBQVM7QUFDOUMsY0FBTSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBRW5CLGFBQUssVUFBVSxlQUFlLEVBQUUsSUFBSSxvQkFBb0IsQ0FBQztBQUd6RCxtQkFBVyxNQUFNO0FBQ2IsZ0JBQU0sY0FBYyxTQUFTLGNBQWMscUJBQXFCLEVBQUUsSUFBSTtBQUN0RSxjQUFJLGFBQWE7QUFDYix3QkFBWSxVQUFVLElBQUksNEJBQTRCO0FBQ3RELHVCQUFXLE1BQU07QUFDYiwwQkFBWSxVQUFVLE9BQU8sNEJBQTRCO0FBQUEsWUFDN0QsR0FBRyxHQUFHO0FBQUEsVUFDVjtBQUFBLFFBQ0osR0FBRyxHQUFHO0FBQUEsTUFDVixDQUFDO0FBR0QsV0FBSyxNQUFNLElBQUksdUJBQXVCLENBQUMsU0FBUztBQUU1QyxjQUFNLFdBQVcsS0FBSyxDQUFDLEdBQUc7QUFHMUIsWUFBSSxVQUFVO0FBQ1YsZUFBSyxVQUFVLFFBQVEsSUFBSTtBQUFBLFFBQy9CO0FBQUEsTUFDSixDQUFDO0FBRUQsV0FBSyxNQUFNLElBQUksZUFBZSxDQUFDLFNBQVM7QUFDcEMsYUFBSyxNQUFNLGNBQWM7QUFBQSxNQUM3QixDQUFDO0FBQUEsSUFDTDtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EsZ0JBQWdCLFVBQVU7QUFDdEIsYUFBTyxLQUFLLFVBQVUsUUFBUSxLQUFLO0FBQUEsSUFDdkM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLGFBQWEsVUFBVTtBQUNuQixXQUFLLFVBQVUsUUFBUSxJQUFJO0FBQUEsSUFDL0I7QUFBQSxFQUNKO0FBQ0o7IiwKICAibmFtZXMiOiBbXQp9Cg==
