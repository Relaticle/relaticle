<x-guest-layout>
    <div class="py-4 md:py-6 lg:py-8 bg-gray-100 dark:bg-gray-900">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Documentation Type Navigation -->
            <div class="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-md p-2 sm:p-4">
                <div class="flex flex-wrap items-center justify-start gap-2 sm:gap-4">
                    @foreach($documentTypes as $typeKey => $typeValue)
                        <a href="{{ route('documentation.show', $typeKey) }}"
                           class="px-3 py-2 text-sm sm:text-base rounded-md transition-colors duration-200
                                  {{ $currentType === $typeKey
                                    ? 'bg-indigo-100 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300 font-medium'
                                    : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700' }}">
                            {{ $typeValue['title'] }}
                        </a>
                    @endforeach
                </div>
            </div>

            <!-- Mobile TOC Toggle Button -->
            <div class="block sm:hidden mb-4">
                <button id="toc-toggle" class="w-full bg-white dark:bg-gray-800 rounded-lg shadow-md p-3 text-left flex justify-between items-center text-indigo-600 dark:text-indigo-400 font-medium">
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"/>
                        </svg>
                        Table of Contents
                    </div>
                    <svg id="toc-toggle-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                </button>
            </div>

            <div class="grid grid-cols-12 gap-4 md:gap-6 lg:gap-8">
                <!-- TOC Container -->
                <div id="toc-container" class="col-span-12 sm:col-span-4 lg:col-span-3 hidden sm:block">
                    <div class="sticky top-20 md:top-24 bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                        <h2 class="text-xl px-4 md:px-6 font-bold my-4 text-indigo-600 dark:text-indigo-400 flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24"
                                 stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M4 6h16M4 12h16M4 18h7"/>
                            </svg>
                            Table of Contents
                        </h2>
                        <div class="border-t border-gray-200 dark:border-gray-700 my-2 md:my-3"></div>
                        <div id="toc" class="space-y-2 md:space-y-3 px-4 md:px-6 mb-3 text-sm max-h-[50vh] md:max-h-[60vh] lg:max-h-[70vh] overflow-y-auto pr-2">
                            <!-- Table of contents will be generated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Main Content -->
                <div class="bg-white col-span-12 sm:col-span-8 lg:col-span-9 dark:bg-gray-800 p-4 sm:p-6 md:p-8 rounded-lg shadow-lg">
                    <div id="documentation-content" class="prose prose-sm sm:prose md:prose-lg dark:prose-invert max-w-none">
                        {!! $documentContent !!}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Find all headings in the documentation content
            const content = document.getElementById('documentation-content');
            const headings = content.querySelectorAll('h1, h2, h3');
            const toc = document.getElementById('toc');
            const tocContainer = document.getElementById('toc-container');
            const tocToggle = document.getElementById('toc-toggle');
            const tocToggleIcon = document.getElementById('toc-toggle-icon');

            // Mobile TOC toggle functionality
            if (tocToggle) {
                tocToggle.addEventListener('click', function() {
                    tocContainer.classList.toggle('hidden');
                    // Rotate the arrow icon
                    if (tocContainer.classList.contains('hidden')) {
                        tocToggleIcon.style.transform = 'rotate(0deg)';
                    } else {
                        tocToggleIcon.style.transform = 'rotate(180deg)';
                    }
                });
            }

            // Handle window resize for TOC visibility
            window.addEventListener('resize', function() {
                if (window.innerWidth >= 640) { // sm breakpoint is 640px in Tailwind
                    tocContainer.classList.remove('hidden');
                } else if (!tocToggle.getAttribute('data-open')) {
                    tocContainer.classList.add('hidden');
                }
            });

            // Clear any existing TOC content
            toc.innerHTML = '';

            // Generate table of contents
            headings.forEach((heading, index) => {
                // Create a unique ID for each heading if it doesn't have one
                if (!heading.id) {
                    heading.id = 'heading-' + index;
                }

                const tagName = heading.tagName.toLowerCase();
                const level = parseInt(tagName.charAt(1)) - 1; // h1 = 0, h2 = 1, etc.

                // Create TOC entry with appropriate indentation
                const tocEntry = document.createElement('a');
                tocEntry.href = '#' + heading.id;
                tocEntry.textContent = heading.textContent;
                tocEntry.classList.add(
                    'block',
                    'py-1',
                    'md:py-1.5',
                    'hover:text-indigo-600',
                    'dark:hover:text-indigo-400',
                    'transition-all',
                    'hover:translate-x-1',
                    'duration-200',
                    'text-sm',
                    'truncate'
                );

                // Add padding based on heading level for indentation
                tocEntry.style.paddingLeft = (level * 0.75) + 'rem';

                // Add font weight and style based on level
                if (level === 0) {
                    tocEntry.classList.add('font-bold', 'text-md');
                } else if (level === 1) {
                    tocEntry.classList.add('font-medium');
                } else {
                    tocEntry.classList.add('font-normal', 'text-gray-600', 'dark:text-gray-400');
                }

                // Highlight current section when scrolling
                tocEntry.addEventListener('click', function (e) {
                    e.preventDefault();
                    const headerOffset = window.innerWidth < 768 ? 100 : 80; // Increased offset for mobile
                    const elementPosition = document.querySelector(this.getAttribute('href')).getBoundingClientRect().top;
                    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

                    window.scrollTo({
                        top: offsetPosition,
                        behavior: 'smooth'
                    });

                    // Hide TOC on mobile after clicking
                    if (window.innerWidth < 640) {
                        tocContainer.classList.add('hidden');
                        tocToggleIcon.style.transform = 'rotate(0deg)';
                        tocToggle.setAttribute('data-open', 'false');
                    }
                });

                toc.appendChild(tocEntry);
            });

            // Active section highlighting
            function highlightActiveTocItem() {
                // Get all section headers
                const headingElements = Array.from(headings);
                if (headingElements.length === 0) return;

                // Determine which section is in view
                let activeHeading = headingElements[0];
                const headerOffset = 100;

                headingElements.forEach((heading) => {
                    const rect = heading.getBoundingClientRect();
                    if (rect.top <= headerOffset + 50) {
                        activeHeading = heading;
                    }
                });

                // Remove active class from all TOC items
                const tocItems = toc.querySelectorAll('a');
                tocItems.forEach(item => {
                    item.classList.remove('text-indigo-600', 'dark:text-indigo-400', 'font-semibold');
                });

                // Add active class to current TOC item
                const currentTocItem = toc.querySelector(`a[href="#${activeHeading.id}"]`);
                if (currentTocItem) {
                    currentTocItem.classList.add('text-indigo-600', 'dark:text-indigo-400', 'font-semibold');
                }
            }

            // Highlight active section on scroll
            window.addEventListener('scroll', highlightActiveTocItem);
            // Initialize active section
            highlightActiveTocItem();
        });
    </script>
</x-guest-layout>
